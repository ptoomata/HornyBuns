{"version":3,"sources":["Cards.js","CardList.js","SearchBox.js","Scroll.js","HornyBuns.js","App.js","serviceWorker.js","index.js"],"names":["Cards","id","name","country","Stats","className","alt","src","CardList","HornyBuns","cardComponents","map","users","i","key","SearchBox","onSearchBox","onChange","type","placeholder","Scroll","props","style","overflowY","border","height","padding","children","App","event","setState","target","value","state","filterHornyBuns","this","filter","buns","toLowerCase","includes","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"gOAceA,G,WAXD,SAAC,GAAkC,IAAhCC,EAA+B,EAA/BA,GAAIC,EAA2B,EAA3BA,KAAMC,EAAqB,EAArBA,QAASC,EAAY,EAAZA,MAChC,OACI,yBAAKC,UAAU,0DACX,yBAAKC,IAAI,OAAOC,IAAG,+BAA0BN,EAA1B,cACnB,4BAAKC,GACL,2BAAIC,GACJ,2BAAIC,MCaDI,EAnBE,SAAC,GAAmB,IAAjBC,EAAgB,EAAhBA,UACdC,EAAiBD,EAAUE,KAAI,SAACC,EAAOC,GACzC,OACI,kBAAC,EAAD,CACAC,IAAKD,EACLZ,GAAIQ,EAAUI,GAAGZ,GACjBC,KAAMO,EAAUI,GAAGX,KACnBC,QAASM,EAAUI,GAAGV,QACtBC,MAAOK,EAAUI,GAAGT,WAIxB,OACI,6BACIM,ICDGK,EAbG,SAAC,GAAqB,IAAnBC,EAAkB,EAAlBA,YACjB,OACI,6BACI,2BACIC,SAAUD,EACVX,UAAU,gCACVa,KAAK,OACLC,YAAY,wCCAbC,EARA,SAACC,GACZ,OACI,yBAAKC,MAAO,CAACC,UAAW,SAAUC,OAAQ,kBAAmBC,OAAQ,QAASC,QAAS,QAClFL,EAAMM,WCLNlB,EAAY,CACrB,CACAR,GAAI,EACJC,KAAM,QACNC,QAAS,uBACTC,MAAO,mCAEP,CACAH,GAAI,EACJC,KAAM,MACNC,QAAS,iBACTC,MAAO,uCAEP,CACAH,GAAI,EACJC,KAAM,OACNC,QAAS,iBACTC,MAAO,yCAEP,CACAH,GAAI,EACJC,KAAM,OACNC,QAAS,eACTC,MAAO,0DAEP,CACAH,GAAI,EACJC,KAAM,OACNC,QAAS,iBACTC,MAAO,mEAEP,CACAH,GAAI,EACJC,KAAM,OACNC,QAAS,0BACTC,MAAO,cAEP,CACAH,GAAI,EACJC,KAAM,OACNC,QAAS,iBACTC,MAAO,uCCHIwB,E,kDA7Bf,aAAe,IAAD,8BACZ,gBAOFZ,YAAc,SAACa,GACX,EAAKC,SAAS,CAAEf,UAAWc,EAAME,OAAOC,SAP1C,EAAKC,MAAQ,CACXxB,UAAWA,EACXM,UAAW,IAJD,E,qDAWF,IAAD,OACDmB,EACNC,KAAKF,MAAMxB,UAAU2B,QAAO,SAAAC,GAC1B,OAAOA,EAAKnC,KAAKoC,cAAcC,SAAS,EAAKN,MAAMlB,UAAUuB,kBAE/D,OACE,yBAAKjC,UAAU,MACb,6CACA,kBAAC,EAAD,CAAWW,YAAamB,KAAKnB,cAC7B,kBAAC,EAAD,KACE,kBAAC,EAAD,CAAUP,UAAWyB,U,GAtBbM,aCIEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.ca8f17ed.chunk.js","sourcesContent":["import React from 'react'\nimport 'tachyons';\n\nconst Cards = ({ id, name, country, Stats }) => {\n    return(\n        <div className='tc dib br3 bg-light-red white ba pa2 grow ma2 shadow-5'>\n            <img alt='face' src={`https://robohash.org/${id}?200x200`}></img>\n            <h2>{name}</h2>\n            <p>{country}</p>\n            <p>{Stats}</p>\n        </div>\n    );\n}\n\nexport default Cards;","import React from 'react';\nimport Cards from './Cards';\n\nconst CardList = ({ HornyBuns }) => {\nconst cardComponents = HornyBuns.map((users, i) => {\n    return(\n        <Cards \n        key={i}\n        id={HornyBuns[i].id} \n        name={HornyBuns[i].name} \n        country={HornyBuns[i].country} \n        Stats={HornyBuns[i].Stats}\n        />\n    );\n}) \n    return(\n        <div>\n           {cardComponents}\n        </div>\n    );\n}\n\nexport default CardList;","import React from 'react';\nimport 'tachyons';\n\nconst SearchBox = ({ onSearchBox }) => {\n    return(\n        <div>\n            <input \n                onChange={onSearchBox} \n                className='tc bg-light-blue w-25 pa3 ma3' \n                type=\"text\" \n                placeholder=\"Hey puti who are you looking for?\">\n            </input>\n        </div>\n    );\n}\n\nexport default SearchBox;","import React from 'react';\n\nconst Scroll = (props) => {\n    return(\n        <div style={{overflowY: 'scroll', border: '2px solid black', height: '500px', padding: '5px'}}>\n            {props.children}\n        </div>\n    );\n}\n\nexport default Scroll;","export const HornyBuns = [\n    {\n    id: 1,\n    name: 'Sione',\n    country: 'Country: New Zealand',\n    Stats: 'Stats: Training to become a DAD'\n    },\n    {\n    id: 2,\n    name: 'Ken',\n    country: 'Country: India',\n    Stats: 'Stats: Member of Wannabe Gang in SF'\n    },\n    {\n    id: 3,\n    name: 'Tasi',\n    country: 'Country: Samoa',\n    Stats: 'Stats: Serving Time in Covid19 Prison'\n    },\n    {\n    id: 4,\n    name: 'Elia',\n    country: 'Country: USA',\n    Stats: 'Stats: Magician: makes his salary disappear in one day'\n    },\n    {\n    id: 5,\n    name: 'Luke',\n    country: 'Country: Tonga',\n    Stats: 'Stats: Becoming a super star rugby (Dads level rugby) in Hawaii'\n    },\n    {\n    id: 6,\n    name: 'John',\n    country: 'Country: American Samoa',\n    Stats: 'Stats: MIA'\n    },\n    {\n    id: 7,\n    name: 'Alby',\n    country: 'Country: China',\n    Stats: 'Stats: Chinese spy living in Samoa'\n    },\n]","import React, { Component } from 'react';\nimport './App.css';\nimport CardList from './CardList';\nimport SearchBox from './SearchBox';\nimport Scroll from './Scroll';\nimport 'tachyons';\nimport { HornyBuns } from './HornyBuns';\n\nclass App extends Component {\nconstructor() {\n  super()\n  this.state = {\n    HornyBuns: HornyBuns,\n    SearchBox: ''\n  }\n}\n\nonSearchBox = (event) => {\n    this.setState({ SearchBox: event.target.value })\n} \n  render() {\n    const filterHornyBuns =\n    this.state.HornyBuns.filter(buns => {\n      return buns.name.toLowerCase().includes(this.state.SearchBox.toLowerCase())\n    })\n    return (\n      <div className='tc'>\n        <h1>Horny Bunnies</h1>\n        <SearchBox onSearchBox={this.onSearchBox}/>\n        <Scroll>\n          <CardList HornyBuns={filterHornyBuns}/>\n        </Scroll>\n      </div>\n\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}